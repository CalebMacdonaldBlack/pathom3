{:paths
 ["src/tasks"]

 :tasks
 {:requires
  ([babashka.fs :as fs]
   [cheshire.core :as json]
   [tasks])

  :init
  (do
    (def source-paths ["src" "test"]))

  artifact
  (tasks/artifact-path)

  artifact:build
  {:depends [artifact]
   :task    (clojure (str "-X:jar :jar " artifact " :version '\"" (tasks/current-version) "\"'"))}

  artifact:install
  {:depends [artifact:build artifact]
   :task    (shell (str "mvn install:install-file -Dfile=" artifact " -DpomFile=pom.xml"))}

  artifact:deploy
  {:depends [artifact:build]
   :task    (if (tasks/released?)
              (println "Version" (tasks/current-version) "is already released (tag for it exists).")
              (do
                (run 'test)
                (tasks/artifact-deploy)
                (tasks/create-tag (tasks/version-tag))
                (tasks/push-with-tags)))}

  ; region snapshot

  artifact:snapshot-version
  (str (tasks/current-version) "-SNAPSHOT")

  artifact:snapshot
  {:depends [artifact:snapshot-version]
   :task    (str "target/pathom3-" artifact:snapshot-version ".jar")}

  artifact:snapshot:build
  {:depends [artifact:snapshot artifact:snapshot-version]
   :task    (clojure (str "-X:jar :jar " artifact:snapshot " :version '\"" artifact:snapshot-version "\"'"))}

  artifact:snapshot:deploy
  {:depends [artifact:snapshot:build artifact:snapshot]
   :task    (clojure (str "-X:deploy :artifact '\"" artifact:snapshot "\"'"))}

  ; endregion

  format-check
  {:task (apply tasks/cljstyle "check" source-paths)}

  format-fix
  {:task (apply tasks/cljstyle "fix" source-paths)}

  lint
  {:task (tasks/clj-kondo-lint source-paths)}

  version:bump
  {:doc  "Bump version to current date."
   :task (let [version (tasks/bump!)]
           (println "Bumped to" version))}

  setup-hooks
  tasks/setup-git-hooks

  test
  (shell "clojure" "-A:test:test-deps")

  test-cljs
  (shell "shadow-cljs" "watch" "test" "-A:test-deps:test-cljs")

  test-cljs-once
  (do
    (shell "shadow-cljs" "compile" "ci")
    (shell "karma" "start" "--single-run"))}}
